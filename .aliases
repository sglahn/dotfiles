#!/usr/bin/env bash

# for dotfile versioning
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

# search aliases
function finda() { grep --no-filename -i -a1 $@ ~/.aliases  | grep -v '^\s*$' ; }

# Terminal 
#----------------------------
# Change directory and list content
function lcd() { cd "$1" && ls; }
# Create directory and enter it
function mcd() { mkdir -p "$1" && cd "$1"; }
if [ -n "$ZSH_VERSION" ]; then
    colorflag=' -GFh';
elif [ -n "$BASH_VERSION" ]; then
    colorflag=' --color=auto';
fi    
# ls
alias ls="ls "$colorflag
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
# grep
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# find shorthand
function f() { find . -name "$1" 2>&1 | grep -v 'Permission denied'; }
# ps
function psa() { ps aux | grep "$1"; }

# Gradle
#----------------------------
# Gradle wrapper
alias gw="./gradlew"
# Gradlew wrapper clean build
alias gwcb="./gradlew clean build"

# Git
#----------------------------
alias gout="git log --pretty=oneline --abbrev-commit --graph @{u}.. --stat"
# jump back to to the last branch
alias gback="git checkout -"
# undo commit
alias gundo="git reset HEAD~"
# git status
alias gs="git status"
# git branch
alias gb="git branch -vv"
# git diff
alias gd="git diff"
# git diff last commit
alias gdl="git diff --cached HEAD^"
# git push
alias gp="git push"
# git commit
alias gcm="git commit -m"
# remove all local branches which remote equivalent is gone
function gprune() { git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d; }
# git checkout
alias gc="git checkout"
# git fetch
alias gf="git fetch"
# get JIRA ticket number from branch name
#function gjira() { git symbolic-ref --short -q HEAD  | sed 's/.*\(\/[A-Z]*-[0-9]*\).*/\1/' | cut -c 2-; }
function gjira() { git symbolic-ref --short -q HEAD  | grep -w -o "[A-Z]\{1,10\}-[0-9]\{1,\}" ; 
    if [[ $? != 0 ]]; 
        then echo "Error: Failed to retrieve id!"; 
        exit 1;
    fi; }
# git commit with jira ticket id as prefix commit message"
function gcmj() { id=$(gjira); if [[ $? == 0 ]]; then git commit -m $id": "$1; else echo "Error: Failed to retieve id!"; return 1; fi; }
# git commit with "NO-TICKET:" as prefix in commit message
function gcmn() { git commit -m "NO-TICKET: "$1; }
# git add all
alias ga="git add ."
# git log with graph
alias gl="git log --graph --decorate --all --stat"
# show last commit
alias glast="git show HEAD~1"

# Docker
#----------------------------
# list all running containers
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'"
# list all running and stopped containers
alias dpsa="docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'"
# list all images
alias di='docker images'
# stop all containers
function dstop() { docker stop $(docker ps -q); }
# remove all containers
function drm() { docker rm -v $(docker ps -a -q); }
# remove all images
function drmi() { docker rmi $(docker images -q); }
# remove all dangeling volumes
function drmv() { docker volume rm $(docker volume ls -q -f dangling=true); }

# Docker Compose
#----------------------------
# Docker compose
alias dco='docker-compose'
# Docker compose logs
alias dcol="docker-compose logs -f --tail 100"

# Network
#----------------------------
# list all IPs
if [[ "$(uname)" == "Darwin" ]]; then
    function ip() { ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'; }
elif [[ "$(uname)" == "Linux" ]]; then
    alias ip='hostname -I'
fi
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
# serve current directory via http
function serve() { 'python3 -m http.server'; }

# tmux
#----------------------------
# tmux
alias t='tmux'
# tmux attach
alias ta='tmux attach'

