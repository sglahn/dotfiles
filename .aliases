#!/usr/bin/env bash

# for dotfile versioning
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
# Checkout/ Update all configuration Git submodules
alias configsub='config submodule init && cat .gitmodules | grep  -Eo "\"(.)*\"" | cut -d "\"" -f 2 | xargs -I{} /usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME submodule update --remote {}'

# search aliases
function finda() { grep --no-filename -i -a1 $@ ~/.aliases  | grep -v '^\s*$' ; }

# Terminal 
#----------------------------
# Change directory and list content
function lcd() { cd "$1" && ls; }
# Create directory and enter it
function mcd() { mkdir -p "$1" && cd "$1"; }
#if [ -n "$ZSH_VERSION" ]; then
if [[ "$(uname)" == "Darwin" ]]; then
    colorflag=' -GFh';
#elif [ -n "$BASH_VERSION" ]; then
elif [[ "$(uname)" == "Linux" ]]; then
    colorflag=' --color=auto';
fi    
# ls
alias ls="ls "$colorflag
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
# grep
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# find shorthand
function f() { find . -name "$1" 2>&1 | grep -v 'Permission denied'; }
# ps
function psa() { ps aux | grep "$1"; }

# Gradle
#----------------------------
# Gradle wrapper
alias gw='./gradlew'
# Gradlew wrapper clean build
alias gwcb='./gradlew clean build'

# Git
#----------------------------
# Show outgoing changes, inspired by Mercurials hgout
alias gout='git log --pretty=oneline --abbrev-commit --graph @{u}.. --stat'
# Show incmoing changes
alias gin='git log --pretty=oneline --abbrev-commit ..@{u} --stat'
# jump back to to the last branch
alias gback='git checkout -'
# undo commit
alias gundo='git reset HEAD~'
# git status
alias gs='git status'
# git branch
alias gb='git branch -vv'
# git diff
alias gd='git diff'
# git diff last commit
alias gdl='git diff --cached HEAD^'
# git push
alias gph='git push'
# git pull
alias gpl='git pull'
# git commit
alias gcm='git commit -m'
# remove all local branches which remote equivalent is gone
function gprune() { git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d; }
# git checkout
alias gc='git checkout'
# git fetch
alias gf='git fetch'
# get JIRA ticket number from branch name
function gjira() { git symbolic-ref --short -q HEAD  | grep -w -Eo "[A-Z0-9]{1,10}-?[A-Z0-9]+-\d+" ; 
    if [[ $? != 0 ]]; 
        then echo "Error: Failed to retrieve Jira Ticket Id from branch name!"; 
        return 1;
    fi; }
# git commit with jira ticket id as prefix commit message"
function gcmj() { id=$(gjira); if [[ $? == 0 ]]; then git commit -m $id": "$1; else echo "Error: Failed to retieve Jira Ticket Id from branch name!"; return 1; fi; }
# git commit with "NO-TICKET:" as prefix in commit message
function gcmn() { git commit -m "NO-TICKET: "$1; }
# git add all
alias gaa='git add .'
# git add 
alias ga='git add'
# git merge 
alias gm='git merge'
# git log with graph
alias gl='git log --graph --decorate --all --stat'
# show last commit
alias glast='git show HEAD~1'

# Docker
#----------------------------
# Docker
alias d='docker'
# list all running containers
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'"
# list all running and stopped containers
alias dpsa="docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'"
# list all images
alias di='docker images'
# docker build
alias db='docker build .'
# stop all containers
function dstop() { docker stop $(docker ps -q); }
# remove all containers, except volume containers (vc_*)
function drm() { docker rm -v $(docker ps -a -q | grep -v -E $(docker ps -a -f name=vc_* -q)); }
# remove all images
function drmi() { docker rmi $(docker images -q); }
# remove all dangeling volumes
function drmv() { docker volume rm $(docker volume ls -q -f dangling=true); }

# Docker Compose
#----------------------------
# docker-compose
alias dco='docker-compose'
# search for folder in ~/.docker-compose
function findGlobalComposeFile() {
    if [ -d ~/.docker-compose ]; then
        find ~/.docker-compose -iname $1*;
    fi
}
function findComposeFile() { 
    if [ -z $1 ]; then
        f='docker-compose.yml';
    else
       f=$(findGlobalComposeFile $1); 
       if [[ -z $f ]]; 
           then f=$1; 
       else
           f=$f"/docker-compose.yml";
       fi; 
    fi;   
    echo $f;
}
# docker-compose logs
function dcol() { f=$(findComposeFile $1); docker-compose -f $f logs -f --tail 100; }
# docker-compose stop
function dcos() { f=$(findComposeFile $1); docker-compose -f $f stop; }
# docker-compose up
function dcou() { f=$(findComposeFile $1); docker-compose -f $f up -d; }

# Network
#----------------------------
# list all IPs
if [[ "$(uname)" == "Darwin" ]]; then
    function ip() { ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'; }
elif [[ "$(uname)" == "Linux" ]]; then
    alias ip='hostname -I'
fi
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
# serve current directory via http
function serve() { python3 -m http.server; }

# tmux
#----------------------------
# tmux
alias t='tmux'
# tmux attach
alias ta='tmux attach'

if type sdk > /dev/null 2>&1; then
    # SDK man
    #----------------------------
    alias usejava9='sdk use java 9.0.1-oracle'
    alias usejava8='sdk use java 8u161-oracle'
fi

